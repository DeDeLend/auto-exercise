{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AutomationCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/TakeProfit.sol": {
      "content": "/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * DeDeLend\n * Copyright (C) 2023 DeDeLend\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\ninterface IHegicStrategy {\n    /**\n     * @return The address of the price provider.\n     */\n    function priceProvider() external view returns (address);\n\n    /**\n     * @param optionID The ID of the option.\n     * @return The profit amount for the specified option.\n     */\n    function payOffAmount(uint256 optionID)\n        external\n        view\n        returns (uint256);\n}\n\ninterface IOperationalTreasury {\n    enum LockedLiquidityState { Unlocked, Locked }\n\n    /**\n     * @param positionID The position ID to pay off.\n     * @param account The address to receive the pay off.\n     */\n    function payOff(uint256 positionID, address account) external;\n\n    /**\n     * @param id The locked liquidity ID.\n     * @return state The state of the locked liquidity.\n     * @return strategy The strategy associated with the locked liquidity.\n     * @return negativepnl The negative profit and loss value.\n     * @return positivepnl The positive profit and loss value.\n     * @return expiration The expiration time of the locked liquidity.\n     */\n    function lockedLiquidity(uint256 id)\n        external\n        view\n        returns (\n            LockedLiquidityState state,\n            IHegicStrategy strategy,\n            uint128 negativepnl,\n            uint128 positivepnl,\n            uint32 expiration\n        );\n}\n\n/**\n * @title TakeProfit\n * @dev A contract that enables users to set and execute take-profit orders on ERC721 tokens.\n * The contract allows users to set a price target, and when the price target is met,\n * the contract automatically executes the order and sends the profit to the user.\n */\ncontract TakeProfit is Ownable {\n    enum TakeType { GreaterThanOrEqual, LessThanOrEqual }\n\n    // TokenInfo struct to store information related to a token for which a take-profit order is set\n    struct TokenInfo {\n        uint256 tokenId;\n        uint256 takeProfitPrice;\n        uint256 expirationTime;\n        address owner;\n        TakeType takeType;\n        uint256 commissionPaid;\n    }\n\n    // Contract and treasury addresses, and mappings to store relevant data\n    IERC721 public erc721Contract;\n    IOperationalTreasury public operationalTreasury;\n    mapping(uint256 => TokenInfo) public tokenIdToTokenInfo;\n    uint256 public commissionSize = 0.001 * 1e18;\n    uint256 public withdrawableBalance;\n\n    uint256 private activeTakeCount;\n    uint256 public maxActiveTakes = 400;\n    mapping(uint256 => uint256) public indexTokenToTokenId;\n    mapping(uint256 => uint256) public idTokenToIndexToken;\n\n    // Events to emit when a take-profit order is set, deleted, updated, or executed\n    event TakeProfitSet(uint256 indexed tokenId, uint256 takeProfitPrice, TakeType takeType);\n    event TakeProfitDeleted(uint256 indexed tokenId);\n    event TakeProfitUpdated(uint256 indexed tokenId, uint256 newTakeProfitPrice, TakeType newTakeType);\n    event TakeProfitExecuted(uint256 indexed tokenId);\n\n    // Constructor to initialize the contract with the required ERC721 contract and operational treasury addresses\n    constructor(address _erc721Address, address _operationalTreasury) {\n        erc721Contract = IERC721(_erc721Address);\n        operationalTreasury = IOperationalTreasury(_operationalTreasury);\n    }\n\n    // Function to set the commission size\n    function setCommissionSize(uint256 newCommissionSize) external onlyOwner {\n        commissionSize = newCommissionSize;\n    }\n\n    // Function to set the maximum number of active takes\n    function setMaxActiveTakes(uint256 newMaxActiveTakes) external onlyOwner {\n        maxActiveTakes = newMaxActiveTakes;\n    }\n\n    // Function for the contract owner to withdraw the profit\n    function withdrawProfit() external onlyOwner {\n        uint256 contractBalance = address(this).balance;\n        require(contractBalance > withdrawableBalance, \"No profit available to withdraw\");\n\n        uint256 profit = contractBalance - withdrawableBalance;\n        withdrawableBalance = contractBalance - profit;\n        payable(owner()).transfer(profit);\n    }\n\n    // Function to get the count of active take-profit orders\n    function getActiveTakeCount() external view returns (uint256) {\n        return activeTakeCount;\n    }\n\n    // Function to set a take-profit order\n    function setTakeProfit(\n        uint256 tokenId,\n        uint256 takeProfitPrice,\n        TakeType takeType\n    ) external payable {\n        require(erc721Contract.ownerOf(tokenId) == msg.sender, \"Caller must be the owner of the token\");\n        require(msg.value >= commissionSize, \"Not enough commission sent\");\n\n        uint256 refund = msg.value - commissionSize;\n        if (refund > 0) {\n            payable(msg.sender).transfer(refund);\n        }\n        withdrawableBalance += commissionSize;\n\n        // Add token to the active list\n        activeTakeCount++;\n        indexTokenToTokenId[activeTakeCount] = tokenId;\n        idTokenToIndexToken[tokenId] = activeTakeCount;\n\n        erc721Contract.transferFrom(msg.sender, address(this), tokenId);\n        uint256 expirationTime = getExpirationTime(tokenId);\n        tokenIdToTokenInfo[tokenId] = TokenInfo(\n            tokenId,\n            takeProfitPrice,\n            expirationTime,\n            msg.sender,\n            takeType,\n            commissionSize\n        );\n\n        emit TakeProfitSet(tokenId, takeProfitPrice, takeType);\n    }\n\n    // Function to delete a take-profit order\n    function deleteTakeProfit(uint256 tokenId) external {\n        TokenInfo memory tokenInfo = tokenIdToTokenInfo[tokenId];\n        require(tokenInfo.owner == msg.sender, \"Caller must be the owner of the token\");\n        require(tokenInfo.expirationTime > 0, \"No token set for take profit\");\n\n        uint256 commissionToReturn = tokenInfo.commissionPaid;\n        withdrawableBalance -= commissionToReturn;\n        payable(msg.sender).transfer(commissionToReturn);\n\n        // Remove token from the active list\n        _removeTokenFromActiveList(tokenId);\n\n        delete tokenIdToTokenInfo[tokenId];\n        erc721Contract.transferFrom(address(this), msg.sender, tokenId);\n\n        emit TakeProfitDeleted(tokenId);\n    }\n\n    // Function to update a take-profit order\n    function updateTakeProfit(\n        uint256 tokenId,\n        uint256 newTakeProfitPrice,\n        TakeType newTakeType\n    ) external {\n        TokenInfo storage tokenInfo = tokenIdToTokenInfo[tokenId];\n        require(tokenInfo.owner == msg.sender, \"Caller must be the owner of the token\");\n\n        tokenInfo.takeProfitPrice = newTakeProfitPrice;\n        tokenInfo.takeType = newTakeType;\n\n        emit TakeProfitUpdated(tokenId, newTakeProfitPrice, newTakeType);\n    }\n\n    // Function to execute a take-profit order\n    function executeTakeProfit(uint256 tokenId) external {\n        TokenInfo memory tokenInfo = tokenIdToTokenInfo[tokenId];\n        require(checkTakeProfit(tokenId), \"Take profit conditions not met\");\n\n        uint256 commissionToReturn = tokenInfo.commissionPaid;\n        withdrawableBalance -= commissionToReturn;\n\n        // Remove token from the active list\n        _removeTokenFromActiveList(tokenId);\n\n        delete tokenIdToTokenInfo[tokenId];\n        payOff(tokenInfo);\n\n        emit TakeProfitExecuted(tokenId);\n    }\n\n    // Function to check if the conditions for a take-profit order are met\n    function checkTakeProfit(uint256 tokenId) public view returns (bool) {\n        TokenInfo memory tokenInfo = tokenIdToTokenInfo[tokenId];\n        if (tokenInfo.expirationTime == 0) {\n            return false;\n        }\n\n        uint256 timeToExpiration = tokenInfo.expirationTime - block.timestamp;\n        if (timeToExpiration < 30 minutes && getPayOffAmount(tokenId) > 0) {\n            return true;\n        }\n\n        uint256 currentPrice = getCurrentPrice(tokenInfo.tokenId);\n        bool takeProfitTriggered = false;\n        if (tokenInfo.takeType == TakeType.GreaterThanOrEqual) {\n            takeProfitTriggered = currentPrice >= tokenInfo.takeProfitPrice;\n        } else if (tokenInfo.takeType == TakeType.LessThanOrEqual) {\n            takeProfitTriggered = currentPrice <= tokenInfo.takeProfitPrice;\n        }\n        return takeProfitTriggered;\n    }\n    \n    function _removeTokenFromActiveList(uint256 tokenId) private {\n        uint256 indexToRemove = idTokenToIndexToken[tokenId];\n        uint256 lastTokenId = indexTokenToTokenId[activeTakeCount];\n\n        // Move the last token to the removed token's position\n        indexTokenToTokenId[indexToRemove] = lastTokenId;\n        idTokenToIndexToken[lastTokenId] = indexToRemove;\n\n        // Remove the last token from the active list\n        delete indexTokenToTokenId[activeTakeCount];\n        delete idTokenToIndexToken[tokenId];\n        activeTakeCount--;\n    }\n\n    // Private function to pay off the profit when the take-profit order is executed\n    function payOff(TokenInfo memory tokenInfo) private {\n        operationalTreasury.payOff(tokenInfo.tokenId, tokenInfo.owner);\n        erc721Contract.transferFrom(address(this), tokenInfo.owner, tokenInfo.tokenId);\n    }\n\n    // Function to get the pay off amount for a specific token\n    function getPayOffAmount(uint256 tokenId) public view returns (uint256) {\n        (, IHegicStrategy strategy, , , ) = operationalTreasury.lockedLiquidity(tokenId);\n        return strategy.payOffAmount(tokenId);\n    } \n\n    // Function to get the current price of a specific token\n    function getCurrentPrice(uint256 tokenId) public view returns (uint256) {\n        (, IHegicStrategy strategy, , , ) = operationalTreasury.lockedLiquidity(tokenId);\n        (, int256 latestPrice, , , ) = AggregatorV3Interface(strategy.priceProvider()).latestRoundData();\n        return uint256(latestPrice);\n    }\n\n    // Function to get the expiration time of a specific token\n    function getExpirationTime(uint256 tokenId) public view returns (uint256) {\n        (, , , , uint32 expiration) = operationalTreasury.lockedLiquidity(tokenId);\n        return uint256(expiration);\n    }\n}\n"
    },
    "contracts/Upkeep.sol": {
      "content": "/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * DeDeLend\n * Copyright (C) 2023 DeDeLend\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n \npragma solidity ^0.8.7;\nimport \"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ninterface ITakeProfit {\n    function checkTakeProfit(uint256 tokenId) external view returns (bool);\n    function executeTakeProfit(uint256 tokenId) external;\n    function indexTokenToTokenId(uint256 indexToken) external view returns (uint256);\n}\n\ncontract UpkeepTakeProfit is \n    AutomationCompatibleInterface, \n    Ownable\n{\n    ITakeProfit public takeProfit;\n    constructor(\n        address _takeProfit\n    ) { \n        takeProfit = ITakeProfit(_takeProfit);\n    }\n    function checkUpkeep(\n        bytes calldata checkData\n    )\n        external\n        view\n        override\n        returns (bool upkeepNeeded, bytes memory performData)\n    {\n        (uint256 lowerBound, uint256 upperBound) = abi.decode(\n            checkData,\n            (uint256, uint256)\n        );\n        uint256 counter;\n        for (uint256 i = 0; i < upperBound - lowerBound + 1; i++) {\n            if (takeProfit.checkTakeProfit(takeProfit.indexTokenToTokenId(lowerBound + i))) {\n                counter++;\n            }\n            if (counter == 2) {\n                break;\n            }\n        }\n\n        uint256[] memory indexes = new uint256[](counter);\n\n        upkeepNeeded = false;\n        uint256 indexCounter;\n\n        for (uint256 i = 0; i < upperBound - lowerBound + 1; i++) {\n            if (takeProfit.checkTakeProfit(takeProfit.indexTokenToTokenId(lowerBound + i))) {\n                upkeepNeeded = true;\n                indexes[indexCounter] = takeProfit.indexTokenToTokenId(lowerBound + i);\n                indexCounter++;\n                if (indexCounter == counter) {\n                    break;\n                }\n            }\n        }\n        performData = abi.encode(indexes);\n        return (upkeepNeeded, performData);\n    }\n\n    function performUpkeep(bytes calldata performData) external override {\n        (uint256[] memory indexes) = abi.decode(\n            performData,\n            (uint256[])\n        );\n        for (uint256 i = 0; i < indexes.length; i++) {\n            if (takeProfit.checkTakeProfit(indexes[i])) {\n                takeProfit.executeTakeProfit(indexes[i]);\n            }\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}